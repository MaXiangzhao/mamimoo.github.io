1.jQuery是什么？
jQuery是一个javascript代码仓库，我们称之为javascript框架。是一个快速的简洁的javascript框架，可以简化查询DOM对象、处理事件里Ajax交互过程。
2.jQuery优点？
>轻量级、体积小、使用灵巧
>强大的选择器
>出色的DOM操作的封装
>可靠的事件处理机制
>完善的Ajax
>链式操作、隐式迭代
>方便的选择页面元素(模仿CSS选择器更精确、灵活)
>动态更改页面样式/页面内容(操作DOM、动态添加、移除样式)
>控制响应事件(动态添加响应事件)
>提供基本网页特效(提供已封装的网页特效方法)
>快速实现通信(ajax)
>易扩展、插件丰富
3.jQuery功能？
>选择器
>过滤器
>事件
>效果
>ajax
4.选择器的优化？
>使用合适的选择器表达式可以提高性能、增强语义并简化逻辑。常用的选择器中，ID选择器速度最快，其次是类型选择器：多用ID选择器、少直接用class选择器、多用父子关系，少用嵌套关系、缓存jQuery对象。
>使用过滤器：类过滤器、下标过滤器、表达式过滤器、映射map、清洗not、截取slice
5.jQuery中的DOM操作？
DOM是一种与浏览器、平台语言无关的接口，使用该接口可以轻松的访问页面中的所有的标准组件。
DOM Core 任何支持DOM的程序都可以使用，JS中的getElementByID(),getElementByTagName(),getAttribute()方法都是DOM Core的组成部分 
HTML-DOM 提供一些更简明的标志来描述HTML元素的属性 
CSS-DOM 在JS中，主要用于获取和设置style对象的各种属性，通过改变style对象的属性，使网页呈现不同的效果 
6.Ajax？
>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术而形成的结合体。


优势 优秀的用户体验 能在不刷新整个页面的前提下更新数据
 提高web程序的性能 与传统模式相比，Ajax模式在性能上最大的区别在于传输数据的方式，传统模式的数据提交要通过表单来实现。Ajax模式只是通过XMLHttpRequest对象向服务器提交希望提交的数据，即按需发送。
 减轻服务器和带宽的负担 Ajax的工作原理相当于在用户和服务器之间加了一个中间层，似用户操作与服务器响应异步化。它在客户端创建Ajax引擎，把传统方式下的一些服务器负担的工作转移到客户端，便于客户端资源来处理，减轻服务器和宽带的负担。
不足 浏览器对XMLHttpRequest对象的支持度不足。 
 破坏浏览器前进、后退按钮的正常功能。 
 对搜索引擎的支持的不足。 
 开发和调试工具的缺乏。 
7.get与post
.get()和.post()方法
load()方法通常用来从web服务器上获取静态的数据文件。在项目中需要传递一些参数给服务器中的页面，那么可以使用$.get()和$.post()或$.ajax()方法 
- 注意：$.get()和$.post()方法是jquery中的全局函数
>$.get()方法 
>$.get()方法使用GET方式来进行异步请求
>结构为：$.get(url,[data],callback,type)
>如果服务器返回的内容格式是xml文档，需要在服务器端设置Content-Type类型 代码如下：header("Content-Type:text/xml:charset=utf-8")//php
>$.get()方法参数解析
参数 类型 说明
url String 请求HTML页的地址
data(可选) Object 发送至服务器的key/ value 数据会作为QueryString附加到请求URL中
callback(可选) Function 载入成功的回调函数（只有当Response的返回状态是success才调用该方法）
type(可选) String 服务器返回内容的格式，包括xml、html、script、json、text和_default
- $.post()方法 
- 它与$.get()方法的结构和使用方式相同，有如下区别 
- GET请求会将参数跟张乃URL后进行传递，而POST请求则是作为Http消息的实体内容发送给web服务器，在ajax请求中，这种区别对用户不可见 
- GET方式对传输数据有大小限制（通常不能大于2KB），而使用POST方式传递的数据量要比GET方式大得多（理论不受限制） 
- GET方式请求的数据会被浏览器缓存起来，因此其他人可以从浏览器的历史纪录中读取这些数据，如：账号、密码。在某种情况下，GET方式会带来严重的安全问题，而POST相对来说可以避免这些问题 
- GET和POST方式传递的数据在服务端的获取也不相同。在PHP中，GET方式用$_GET[]获取；POST方式用$_POST[]获取;两种方式都可用$_REQUEST[]来获取
  ● 总结 
      ○ 使用load()、$.get()和$.post()方法完成了一些常规的Ajax程序，如果还需要复杂的Ajax程序，就需要用到$.ajax()方式
8. jQuery性能优化
      ○ 使用最新版的jQuery类库
      ○ 使用合适的选择器
          ■ $(#id) 
              ● 使用id来定位DOM元素是最佳的方式，为了提高性能，建议从最近的ID元素开始往下搜索
          ■ $("p") , $("div") , $("input") 
              ● 标签选择器性能也不错，它是性能优化的第二选择。因为jQuery将直接调用本地方法document.getElementsByTagName()来定位DOM元素
          ■ $(".class") 
              ● 建议有选择性的使用
          ■ $("[attribute=value]") 
              ● 对这个利用属性定位DOM元素，本地JavaScript并没有直接实现。这种方式性能并不是很理想。建议避免使用。
          ■ $(":hidden") 
              ● 和上面利用属性定位DOM方式类似，建议尽量不要使用
          ■ 注意的地方 
              ● 尽量使用ID选择器
              ● 尽量给选择器指定上下文
      ○ 缓存对象
          ■ 如果你需要在其他函数中使用jQuery对象，你可以把他们缓存在全局环境中
      ○ 数组方式使用jQuery对象
      ○ 使用jQuery选择器获取的结果是一个jQuery对象。在性能方面，建议使用for或while循环来处理，而不是$.each()
      ○ 事件代理
      ○ 每一个JavaScript事件（如：click、mouseover）都会冒泡到父级节点。当我们需要给多个元素调用同个函数时这点很有用。比如，我们要为一个表单绑定这样的行为：点击td后，把背景颜色设置为红色 
          ■ $("#myTable td").click(function(){$(this).css("background","red");});
          ■ 假设有100个td元素，在使用以上的方式时，绑定了100个事件，将带来性能影响
          ■ 代替这种多元素的事件监听方法是，你只需向他们的父节点绑定一次事件，然后通过event.target获取到点击的当前元素
          ■ $("#myTable td").click(function({$(e.target).css("background","red")});
          ■ e.target捕捉到触发的目标
          ■ 在jQuery1.7中提供了一个新的方法on()，来帮助你将整个事件监听封装到一个便利的方法中
          ■ $("#myTable td").on("click",'td',function(){$(this).css("background","red");});
      ○ 将你的代码转化成jQuery插件
      ○ 它能够使你的代码有更好的重用性，并且能够有效的帮助你组织代码
      ○ 使用join()方法来拼接字符串
      ○ 也许你之前使用+来拼接字符串，现在可以改了。它确实有助于性能优化，尤其是长字符串处理的时候
      ○ 合理使用HTML5和Data属性
      ○ Html5的data属性可以帮助我们插入数据，特别是后端的数据交换。jQuery的Data()方法有效利用HTML5的属性
          ■ 例如：<div id="dl" data-role="page" data-list-value="43" data-options='{"name:""John"}'>
          ■ 为了读取数据，你需要使用如下代码
          ■ $("#dl').data("role';//page)
          ■ $("#dl').data("lastValue';//43)
          ■ $("#dl').data("options';//john)
      ○ 尽量使用原生的JavaScript方法
      ○ 压缩JavaScript代码
      ○ 一方面使用Gzip；另一方面去除JavaScript文件里面的注释、空白


















